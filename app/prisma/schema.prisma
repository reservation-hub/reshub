generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_HOST")
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique @db.VarChar(255)
  username     String?       @db.VarChar(255)
  password     String        @db.VarChar(255)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  reservations Reservation[]
  oAuthIDs     UserOAuthIds?
  profile      UserProfile?
  roles        UserRoles[]
}

model UserProfile {
  id        Int    @id @default(autoincrement())
  firstName String @db.VarChar(255)
  lastName  String @db.VarChar(255)
  userID    Int    @unique @map("user_id")
  user      User   @relation(fields: [userID], references: [id], onDelete: SetNull)
}

model UserOAuthIds {
  id         Int     @id @default(autoincrement())
  facebookID String? @unique @map("facebook_id")
  googleID   String? @unique @map("google_id")
  userID     Int     @unique @map("user_id")
  user       User    @relation(fields: [userID], references: [id], onDelete: SetNull)
}

model Role {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(32)
  description String      @db.VarChar(255)
  slug        String      @unique
  users       UserRoles[]
}

model UserRoles {
  id     Int  @id @default(autoincrement())
  roleID Int  @map("role_id")
  userID Int  @map("user_id")
  role   Role @relation(fields: [roleID], references: [id])
  user   User @relation(fields: [userID], references: [id])
}

model Area {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(32)
  slug        String       @unique @db.VarChar(32)
  prefectures Prefecture[]
  shops       Shop[]
}

model Prefecture {
  id     Int    @id @default(autoincrement())
  name   String @db.VarChar(32)
  slug   String @unique @db.VarChar(32)
  areaID Int    @map("area_id")
  area   Area   @relation(fields: [areaID], references: [id])
  cities City[]
  shops  Shop[]
}

model City {
  id           Int        @id @default(autoincrement())
  name         String     @db.VarChar(32)
  prefectureID Int        @map("prefecture_id")
  slug         String     @unique
  prefecture   Prefecture @relation(fields: [prefectureID], references: [id])
  shops        Shop[]
}

model Shop {
  id           Int            @id @default(autoincrement())
  areaID       Int            @map("area_id")
  cityID       Int            @map("city_id")
  createdAt    DateTime       @default(now()) @map("created_at")
  prefectureID Int            @map("prefecture_id")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  name         String?        @db.VarChar(255)
  area         Area           @relation(fields: [areaID], references: [id])
  city         City           @relation(fields: [cityID], references: [id])
  prefecture   Prefecture     @relation(fields: [prefectureID], references: [id])
  reservations Reservation[]
  stylists     ShopStylists[]
}

model Stylist {
  id           Int            @id @default(autoincrement())
  shopID       Int            @map("shop_id")
  reservations Reservation[]
  shops        ShopStylists[]
}

model ShopStylists {
  id        Int     @id @default(autoincrement())
  shopID    Int     @map("shop_id")
  stylistID Int     @map("stylist_id")
  shop      Shop    @relation(fields: [shopID], references: [id])
  stylist   Stylist @relation(fields: [stylistID], references: [id])
}

model Reservation {
  id              Int      @id @default(autoincrement())
  reservationDate DateTime @db.Timestamp(6)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  shopID          Int      @map("shop_id")
  stylistID       Int      @map("stylist_id")
  userId          Int      @map("user_id")
  shop            Shop     @relation(fields: [shopID], references: [id], onDelete: SetNull)
  stylist         Stylist  @relation(fields: [stylistID], references: [id])
  user            User     @relation(fields: [userId], references: [id])
}
