generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_HOST")
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique @db.VarChar(255)
  username     String?       @unique @db.VarChar(255)
  password     String        @db.VarChar(255)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  roleId       Int
  profileId    Int           @unique @map("profile_id")
  profile      UserProfile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  role         Role          @relation(fields: [roleId], references: [id])
  reservations Reservation[]
  reviews      Review[]
  shopUser     ShopUser[]
  oAuthIds     UserOAuthIds?
}

model UserProfile {
  id             Int       @id @default(autoincrement())
  firstNameKanji String    @map("first_name_kanji") @db.VarChar(255)
  lastNameKanji  String    @map("last_name_kanji") @db.VarChar(255)
  firstNameKana  String    @map("first_name_kana") @db.VarChar(255)
  lastNameKana   String    @map("last_name_kana") @db.VarChar(255)
  phoneNumber    String?   @map("phone_number") @db.VarChar(15)
  address        String?   @db.VarChar(255)
  birthday       DateTime? @db.Date
  gender         Gender?
  user           User?
}

model UserOAuthIds {
  id         Int     @id @default(autoincrement())
  facebookId String? @unique @map("facebook_id")
  googleId   String? @unique @map("google_id")
  userId     Int     @unique @map("user_id")
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(32)
  description String   @db.VarChar(255)
  slug        RoleSlug @unique
  users       User[]
}

model Area {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(32)
  slug        String       @unique @db.VarChar(32)
  prefectures Prefecture[]
  shops       Shop[]
}

model Prefecture {
  id     Int    @id @default(autoincrement())
  name   String @db.VarChar(32)
  slug   String @unique @db.VarChar(32)
  areaId Int    @map("area_id")
  area   Area   @relation(fields: [areaId], references: [id])
  cities City[]
  shops  Shop[]
}

model City {
  id           Int        @id @default(autoincrement())
  name         String     @db.VarChar(32)
  prefectureId Int        @map("prefecture_id")
  slug         String     @unique
  prefecture   Prefecture @relation(fields: [prefectureId], references: [id])
  shops        Shop[]
}

model Shop {
  id           Int           @id @default(autoincrement())
  areaId       Int           @map("area_id")
  cityId       Int           @map("city_id")
  createdAt    DateTime      @default(now()) @map("created_at")
  prefectureId Int           @map("prefecture_id")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  shopDetailId Int           @unique @map("shop_detail_id")
  area         Area          @relation(fields: [areaId], references: [id])
  city         City          @relation(fields: [cityId], references: [id])
  prefecture   Prefecture    @relation(fields: [prefectureId], references: [id])
  shopDetail   ShopDetail    @relation(fields: [shopDetailId], references: [id], onDelete: Cascade)
  menu         Menu[]
  reservations Reservation[]
  reviews      Review[]
  shopTags     ShopTags[]
  shopUser     ShopUser?
  stylists     Stylist[]
}

model Menu {
  id           Int           @id @default(autoincrement())
  shopId       Int           @map("shop_id")
  description  String        @db.VarChar(255)
  duration     Int
  imageId      Int?          @unique @map("image_id")
  name         String        @db.VarChar(255)
  price        Int
  image        ModelImage?   @relation(fields: [imageId], references: [id])
  shop         Shop          @relation(fields: [shopId], references: [id])
  reservations Reservation[]
}

model ShopUser {
  id     Int  @id @default(autoincrement())
  shopId Int  @unique @map("shop_id")
  userId Int  @map("user_id")
  shop   Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ShopDetail {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(255)
  shopForSearch String @db.VarChar(255) @map("shop_for_search")
  address     String?      @db.VarChar(255)
  phoneNumber String?      @map("phone_number") @db.VarChar(255)
  shopId      Int?         @unique @map("shop_id")
  details     String?      @db.VarChar(255)
  days        Days[]
  endTime     String       @map("end_time")
  startTime   String       @map("start_time")
  seats       Int
  images      ModelImage[]
  shop        Shop?
}

model ModelImage {
  id           Int         @id @default(autoincrement())
  imageId      Int         @unique @map("image_id")
  shopDetailId Int?        @map("shop_detail_id")
  stylistId    Int?        @unique @map("stylist_id")
  image        Image       @relation(fields: [imageId], references: [id], onDelete: Cascade)
  shopDetail   ShopDetail? @relation(fields: [shopDetailId], references: [id], onDelete: Cascade)
  stylist      Stylist?    @relation(fields: [stylistId], references: [id], onDelete: Cascade)
  menu         Menu?
}

model Image {
  id         Int         @id @default(autoincrement())
  text       String      @db.VarChar(255)
  url        String      @db.VarChar(255)
  modelImage ModelImage?
}

model Stylist {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(28)
  shopId       Int           @map("shop_id")
  price        Int
  days         Days[]
  endTime      String        @map("end_time")
  startTime    String        @map("start_time")
  shop         Shop          @relation(fields: [shopId], references: [id])
  image        ModelImage?
  reservations Reservation[]
}

model Reservation {
  id              Int               @id @default(autoincrement())
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  shopId          Int               @map("shop_id")
  stylistId       Int?              @map("stylist_id")
  userId          Int               @map("user_id")
  reservationDate DateTime          @map("reservation_date") @db.Timestamp(6)
  status          ReservationStatus @default(RESERVED)
  menuId          Int               @map("menu_id")
  menu            Menu              @relation(fields: [menuId], references: [id])
  shop            Shop              @relation(fields: [shopId], references: [id], onDelete: Cascade)
  stylist         Stylist?          @relation(fields: [stylistId], references: [id])
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tag {
  id        Int        @id @default(autoincrement())
  slug      String     @unique
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  ShopTags  ShopTags[]
}

model ShopTags {
  id     Int  @id @default(autoincrement())
  shopId Int  @map("shop_id")
  tagId  Int  @map("tag_id")
  shop   Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
}

model Review {
  id        Int      @id @default(autoincrement())
  shopId    Int      @map("shop_id")
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  score     Int      @default(1)
  text      String   @db.Text
  shop      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Gender {
  MALE
  FEMALE
}

enum RoleSlug {
  ADMIN
  SHOP_STAFF
  CLIENT
}

enum ReservationStatus {
  CANCELLED
  COMPLETED
  RESERVED
}

enum Days {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
